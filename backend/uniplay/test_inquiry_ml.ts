import { api, APIError } from "encore.dev/api";
import { getAuthData } from "~encore/auth";
import db from "../db";

export interface TestInquiryMLResponse {
  success: boolean;
  curlCommand: string;
  packageInfo: {
    id: number;
    name: string;
    productName: string;
    entitas_id: string;
    denom_id: string;
  };
  rawRequest: {
    entitas_id: string;
    denom_id: string;
    user_id: string;
    server_id?: string;
  };
  rawResponse: any;
  expectedFormat: {
    status: string;
    message: string;
    inquiry_id: string;
    inquiry_info?: {
      username?: string;
    };
  };
  isMatchingExpectedFormat: boolean;
  errorDetails?: string;
}

export const testInquiryML = api<void, TestInquiryMLResponse>(
  { expose: true, method: "POST", path: "/uniplay/test-inquiry-ml", auth: true },
  async () => {
    const auth = getAuthData()!;
    
    if (!auth.isAdmin) {
      throw APIError.permissionDenied("Only admin can test inquiry");
    }

    console.log("=== TEST INQUIRY FREE FIRE ===");
    
    // Step 1: Find Free Fire - 5 Diamonds package
    let testPackage;
    try {
      console.log("Step 1: Querying database for Free Fire - 5 Diamonds...");
      testPackage = await db.queryRow<{
        id: number;
        name: string;
        product_name: string;
        uniplay_entitas_id: string | null;
        uniplay_denom_id: string | null;
      }>`
        SELECT 
          p.id, 
          p.name,
          pr.name as product_name, 
          pr.uniplay_entitas_id, 
          p.uniplay_denom_id
        FROM packages p
        INNER JOIN products pr ON p.product_id = pr.id
        WHERE pr.name = 'Free Fire'
        AND p.name = '5 Diamonds'
        AND p.uniplay_denom_id IS NOT NULL
        AND pr.uniplay_entitas_id IS NOT NULL
        LIMIT 1
      `;
      console.log("Database query result:", testPackage);
    } catch (dbError: any) {
      console.error("Database query error:", dbError);
      throw APIError.internal("Failed to query package: " + dbError.message);
    }

    if (!testPackage) {
      throw APIError.notFound("Free Fire package not found. Please sync from UniPlay first.");
    }

    if (!testPackage.uniplay_entitas_id || !testPackage.uniplay_denom_id) {
      throw APIError.invalidArgument(`Package "${testPackage.name}" missing UniPlay IDs. Entitas: ${testPackage.uniplay_entitas_id}, Denom: ${testPackage.uniplay_denom_id}`);
    }

    console.log("✅ Found package:", {
      id: testPackage.id,
      name: testPackage.name,
      product_name: testPackage.product_name,
      entitas_id: testPackage.uniplay_entitas_id,
      denom_id: testPackage.uniplay_denom_id,
    });

    // Step 2: Prepare request (Free Fire hanya pakai user_id, tanpa server_id)
    const testRequest = {
      entitas_id: testPackage.uniplay_entitas_id,
      denom_id: testPackage.uniplay_denom_id,
      user_id: "235791720", // Test User ID
    };

    console.log("Request payload (in correct order):", testRequest);

    // Step 3: Get config for curl command
    let apiKey = "YOUR_API_KEY";
    let baseUrl = "https://api-reseller.uniplay.id/v1";
    
    try {
      const config = await db.queryRow<{ value: string }>`
        SELECT value FROM admin_config WHERE key = 'dashboard_config'
      `;
      
      if (config) {
        const dashboardConfig = JSON.parse(config.value);
        if (dashboardConfig.uniplay) {
          apiKey = dashboardConfig.uniplay.apiKey || apiKey;
          baseUrl = dashboardConfig.uniplay.baseUrl || baseUrl;
        }
      }
    } catch (err) {
      console.warn("Could not load config for curl command:", err);
    }

    // Generate timestamp
    const now = new Date();
    const jakartaTime = new Date(now.toLocaleString('en-US', { timeZone: 'Asia/Jakarta' }));
    const timestamp = jakartaTime.toISOString().slice(0, 19).replace('T', ' ');

    const requestBodyWithAuth = {
      api_key: apiKey,
      timestamp: timestamp,
      ...testRequest,
    };

    // Generate curl command
    const curlCommand = `# Copy this command and run in terminal to test manually
curl -X POST '${baseUrl}/inquiry-payment' \\
  -H 'Content-Type: application/json' \\
  -H 'UPL-ACCESS-TOKEN: <WILL_BE_GENERATED_BY_BACKEND>' \\
  -H 'UPL-SIGNATURE: <WILL_BE_GENERATED_BY_BACKEND>' \\
  -d '${JSON.stringify(requestBodyWithAuth, null, 2)}'

# NOTE: ACCESS-TOKEN and SIGNATURE will be auto-generated by the backend
# The actual request body sent will include api_key and timestamp
`;

    console.log("Generated curl command");

    // Step 4: Call UniPlay API
    try {
      console.log("Step 4: Calling UniPlay inquiry-payment API...");
      
      // Import the inquiryPayment function dynamically
      const { inquiryPayment } = await import("./client");
      const response = await inquiryPayment(testRequest);
      
      console.log("=== INQUIRY RESPONSE ===");
      console.log(JSON.stringify(response, null, 2));

      const expectedFormat = {
        status: "200",
        message: "Success",
        inquiry_id: "INQUIRY ID RESULT",
        inquiry_info: {
          username: "jagoanneon (Note: Not Showing If Voucher)",
        },
      };

      const isMatchingExpectedFormat = 
        response.status === "200" &&
        typeof response.message === "string" &&
        typeof response.inquiry_id === "string" &&
        response.inquiry_id.length > 0;

      return {
        success: true,
        curlCommand,
        packageInfo: {
          id: testPackage.id,
          name: testPackage.name,
          productName: testPackage.product_name,
          entitas_id: testPackage.uniplay_entitas_id,
          denom_id: testPackage.uniplay_denom_id,
        },
        rawRequest: testRequest,
        rawResponse: response,
        expectedFormat,
        isMatchingExpectedFormat,
      };
    } catch (err: any) {
      console.error("❌ Test inquiry failed:", err);
      
      // Return detailed error info
      const errorDetails = err.message || String(err);
      
      return {
        success: false,
        curlCommand,
        packageInfo: {
          id: testPackage.id,
          name: testPackage.name,
          productName: testPackage.product_name,
          entitas_id: testPackage.uniplay_entitas_id,
          denom_id: testPackage.uniplay_denom_id,
        },
        rawRequest: testRequest,
        rawResponse: {
          error: errorDetails,
          stack: err.stack,
        },
        expectedFormat: {
          status: "200",
          message: "Success",
          inquiry_id: "INQUIRY ID RESULT",
          inquiry_info: {
            username: "jagoanneon",
          },
        },
        isMatchingExpectedFormat: false,
        errorDetails,
      };
    }
  }
);
