// Code generated by the Encore 1.50.6 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/
import type { CookieWithOptions } from "encore.dev/api";

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the  Encore application.
 */
export class Client {
    public readonly admin: admin.ServiceClient
    public readonly auth: auth.ServiceClient
    public readonly balance: balance.ServiceClient
    public readonly message: message.ServiceClient
    public readonly notification: notification.ServiceClient
    public readonly otp: otp.ServiceClient
    public readonly payment: payment.ServiceClient
    public readonly pkg: pkg.ServiceClient
    public readonly product: product.ServiceClient
    public readonly transaction: transaction.ServiceClient
    public readonly uniplay: uniplay.ServiceClient
    public readonly validation: validation.ServiceClient
    public readonly whatsapp: whatsapp.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.admin = new admin.ServiceClient(base)
        this.auth = new auth.ServiceClient(base)
        this.balance = new balance.ServiceClient(base)
        this.message = new message.ServiceClient(base)
        this.notification = new notification.ServiceClient(base)
        this.otp = new otp.ServiceClient(base)
        this.payment = new payment.ServiceClient(base)
        this.pkg = new pkg.ServiceClient(base)
        this.product = new product.ServiceClient(base)
        this.transaction = new transaction.ServiceClient(base)
        this.uniplay = new uniplay.ServiceClient(base)
        this.validation = new validation.ServiceClient(base)
        this.whatsapp = new whatsapp.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * Import the auth handler to be able to derive the auth type
 */
import type { auth as auth_auth } from "~backend/auth/auth";

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    /**
     * Allows you to set the authentication data to be used for each
     * request either by passing in a static object or by passing in
     * a function which returns a new object for each request.
     */
    auth?: RequestType<typeof auth_auth> | AuthDataGenerator
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    getConfig as api_admin_config_getConfig,
    getGlobalDiscount as api_admin_config_getGlobalDiscount,
    getSuperadminPhone as api_admin_config_getSuperadminPhone,
    saveConfig as api_admin_config_saveConfig,
    saveGlobalDiscount as api_admin_config_saveGlobalDiscount
} from "~backend/admin/config";
import { dashboard as api_admin_dashboard_dashboard } from "~backend/admin/dashboard";
import { deleteAllProducts as api_admin_delete_all_products_deleteAllProducts } from "~backend/admin/delete_all_products";
import { deleteUserByPhone as api_admin_delete_user_by_phone_deleteUserByPhone } from "~backend/admin/delete_user_by_phone";
import { editUser as api_admin_edit_user_editUser } from "~backend/admin/edit_user";
import {
    setAdmin as api_admin_manage_user_setAdmin,
    updateUserPhone as api_admin_manage_user_updateUserPhone
} from "~backend/admin/manage_user";
import { listAllPackages as api_admin_packages_listAllPackages } from "~backend/admin/packages";
import {
    createPackage as api_admin_packages_crud_createPackage,
    deletePackage as api_admin_packages_crud_deletePackage,
    updatePackage as api_admin_packages_crud_updatePackage
} from "~backend/admin/packages_crud";
import { listAllProducts as api_admin_products_listAllProducts } from "~backend/admin/products";
import {
    createProduct as api_admin_products_crud_createProduct,
    deleteProduct as api_admin_products_crud_deleteProduct,
    updateProduct as api_admin_products_crud_updateProduct
} from "~backend/admin/products_crud";
import {
    demoteFromAdmin as api_admin_promote_admin_demoteFromAdmin,
    promoteToAdmin as api_admin_promote_admin_promoteToAdmin
} from "~backend/admin/promote_admin";
import { toggleServerIdRequirement as api_admin_toggle_server_id_toggleServerIdRequirement } from "~backend/admin/toggle_server_id";
import { toggleSpecialItem as api_admin_toggle_special_item_toggleSpecialItem } from "~backend/admin/toggle_special_item";
import {
    toggleFeatured as api_admin_toggle_visibility_toggleFeatured,
    togglePackage as api_admin_toggle_visibility_togglePackage,
    toggleProduct as api_admin_toggle_visibility_toggleProduct
} from "~backend/admin/toggle_visibility";
import { listTransactions as api_admin_transactions_listTransactions } from "~backend/admin/transactions";
import { updateSuperadminPhone as api_admin_update_phone_updateSuperadminPhone } from "~backend/admin/update_phone";
import { updateTransaction as api_admin_update_transaction_updateTransaction } from "~backend/admin/update_transaction";
import { getUploadUrl as api_admin_upload_icon_getUploadUrl } from "~backend/admin/upload_icon";
import { getUserTransactions as api_admin_user_transactions_getUserTransactions } from "~backend/admin/user_transactions";
import {
    banUser as api_admin_users_banUser,
    deleteUser as api_admin_users_deleteUser,
    listUsers as api_admin_users_listUsers,
    unbanUser as api_admin_users_unbanUser
} from "~backend/admin/users";
import {
    createVoucherBatch as api_admin_vouchers_createVoucherBatch,
    deleteAllVouchers as api_admin_vouchers_deleteAllVouchers,
    deleteVoucher as api_admin_vouchers_deleteVoucher,
    listVouchers as api_admin_vouchers_listVouchers
} from "~backend/admin/vouchers";
import {
    addWhatsAppCS as api_admin_whatsapp_cs_addWhatsAppCS,
    deleteWhatsAppCS as api_admin_whatsapp_cs_deleteWhatsAppCS,
    listWhatsAppCS as api_admin_whatsapp_cs_listWhatsAppCS,
    updateWhatsAppCS as api_admin_whatsapp_cs_updateWhatsAppCS
} from "~backend/admin/whatsapp_cs";

export namespace admin {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.addWhatsAppCS = this.addWhatsAppCS.bind(this)
            this.banUser = this.banUser.bind(this)
            this.createPackage = this.createPackage.bind(this)
            this.createProduct = this.createProduct.bind(this)
            this.createVoucherBatch = this.createVoucherBatch.bind(this)
            this.dashboard = this.dashboard.bind(this)
            this.deleteAllProducts = this.deleteAllProducts.bind(this)
            this.deleteAllVouchers = this.deleteAllVouchers.bind(this)
            this.deletePackage = this.deletePackage.bind(this)
            this.deleteProduct = this.deleteProduct.bind(this)
            this.deleteUser = this.deleteUser.bind(this)
            this.deleteUserByPhone = this.deleteUserByPhone.bind(this)
            this.deleteVoucher = this.deleteVoucher.bind(this)
            this.deleteWhatsAppCS = this.deleteWhatsAppCS.bind(this)
            this.demoteFromAdmin = this.demoteFromAdmin.bind(this)
            this.editUser = this.editUser.bind(this)
            this.getConfig = this.getConfig.bind(this)
            this.getGlobalDiscount = this.getGlobalDiscount.bind(this)
            this.getSuperadminPhone = this.getSuperadminPhone.bind(this)
            this.getUploadUrl = this.getUploadUrl.bind(this)
            this.getUserTransactions = this.getUserTransactions.bind(this)
            this.listAllPackages = this.listAllPackages.bind(this)
            this.listAllProducts = this.listAllProducts.bind(this)
            this.listTransactions = this.listTransactions.bind(this)
            this.listUsers = this.listUsers.bind(this)
            this.listVouchers = this.listVouchers.bind(this)
            this.listWhatsAppCS = this.listWhatsAppCS.bind(this)
            this.promoteToAdmin = this.promoteToAdmin.bind(this)
            this.saveConfig = this.saveConfig.bind(this)
            this.saveGlobalDiscount = this.saveGlobalDiscount.bind(this)
            this.setAdmin = this.setAdmin.bind(this)
            this.toggleFeatured = this.toggleFeatured.bind(this)
            this.togglePackage = this.togglePackage.bind(this)
            this.toggleProduct = this.toggleProduct.bind(this)
            this.toggleServerIdRequirement = this.toggleServerIdRequirement.bind(this)
            this.toggleSpecialItem = this.toggleSpecialItem.bind(this)
            this.unbanUser = this.unbanUser.bind(this)
            this.updatePackage = this.updatePackage.bind(this)
            this.updateProduct = this.updateProduct.bind(this)
            this.updateSuperadminPhone = this.updateSuperadminPhone.bind(this)
            this.updateTransaction = this.updateTransaction.bind(this)
            this.updateUserPhone = this.updateUserPhone.bind(this)
            this.updateWhatsAppCS = this.updateWhatsAppCS.bind(this)
        }

        public async addWhatsAppCS(params: RequestType<typeof api_admin_whatsapp_cs_addWhatsAppCS>): Promise<ResponseType<typeof api_admin_whatsapp_cs_addWhatsAppCS>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/whatsapp-cs`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_whatsapp_cs_addWhatsAppCS>
        }

        public async banUser(params: RequestType<typeof api_admin_users_banUser>): Promise<ResponseType<typeof api_admin_users_banUser>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/users/ban`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_users_banUser>
        }

        public async createPackage(params: RequestType<typeof api_admin_packages_crud_createPackage>): Promise<ResponseType<typeof api_admin_packages_crud_createPackage>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/packages`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_packages_crud_createPackage>
        }

        public async createProduct(params: RequestType<typeof api_admin_products_crud_createProduct>): Promise<ResponseType<typeof api_admin_products_crud_createProduct>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/products`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_products_crud_createProduct>
        }

        public async createVoucherBatch(params: RequestType<typeof api_admin_vouchers_createVoucherBatch>): Promise<ResponseType<typeof api_admin_vouchers_createVoucherBatch>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/vouchers/batch`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_vouchers_createVoucherBatch>
        }

        public async dashboard(): Promise<ResponseType<typeof api_admin_dashboard_dashboard>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/dashboard`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_dashboard_dashboard>
        }

        public async deleteAllProducts(): Promise<ResponseType<typeof api_admin_delete_all_products_deleteAllProducts>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/delete-all-products`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_delete_all_products_deleteAllProducts>
        }

        public async deleteAllVouchers(): Promise<ResponseType<typeof api_admin_vouchers_deleteAllVouchers>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/vouchers/all/delete`, {method: "DELETE", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_vouchers_deleteAllVouchers>
        }

        public async deletePackage(params: { packageId: number }): Promise<ResponseType<typeof api_admin_packages_crud_deletePackage>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/packages/${encodeURIComponent(params.packageId)}`, {method: "DELETE", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_packages_crud_deletePackage>
        }

        public async deleteProduct(params: { productId: number }): Promise<ResponseType<typeof api_admin_products_crud_deleteProduct>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/products/${encodeURIComponent(params.productId)}`, {method: "DELETE", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_products_crud_deleteProduct>
        }

        public async deleteUser(params: { userId: string }): Promise<ResponseType<typeof api_admin_users_deleteUser>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/users/${encodeURIComponent(params.userId)}`, {method: "DELETE", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_users_deleteUser>
        }

        public async deleteUserByPhone(params: RequestType<typeof api_admin_delete_user_by_phone_deleteUserByPhone>): Promise<ResponseType<typeof api_admin_delete_user_by_phone_deleteUserByPhone>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/delete-user-by-phone`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_delete_user_by_phone_deleteUserByPhone>
        }

        public async deleteVoucher(params: { code: string }): Promise<ResponseType<typeof api_admin_vouchers_deleteVoucher>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/vouchers/${encodeURIComponent(params.code)}`, {method: "DELETE", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_vouchers_deleteVoucher>
        }

        public async deleteWhatsAppCS(params: { id: number }): Promise<ResponseType<typeof api_admin_whatsapp_cs_deleteWhatsAppCS>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/whatsapp-cs/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_whatsapp_cs_deleteWhatsAppCS>
        }

        public async demoteFromAdmin(params: { userId: string }): Promise<ResponseType<typeof api_admin_promote_admin_demoteFromAdmin>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/users/${encodeURIComponent(params.userId)}/demote`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_promote_admin_demoteFromAdmin>
        }

        public async editUser(params: RequestType<typeof api_admin_edit_user_editUser>): Promise<ResponseType<typeof api_admin_edit_user_editUser>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                balance:     params.balance,
                email:       params.email,
                fullName:    params.fullName,
                phoneNumber: params.phoneNumber,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/users/${encodeURIComponent(params.userId)}/edit`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_edit_user_editUser>
        }

        public async getConfig(): Promise<ResponseType<typeof api_admin_config_getConfig>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/config/get`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_config_getConfig>
        }

        public async getGlobalDiscount(): Promise<ResponseType<typeof api_admin_config_getGlobalDiscount>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/config/global-discount`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_config_getGlobalDiscount>
        }

        public async getSuperadminPhone(params: { email: string }): Promise<ResponseType<typeof api_admin_config_getSuperadminPhone>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/superadmin/phone/${encodeURIComponent(params.email)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_config_getSuperadminPhone>
        }

        public async getUploadUrl(params: RequestType<typeof api_admin_upload_icon_getUploadUrl>): Promise<ResponseType<typeof api_admin_upload_icon_getUploadUrl>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/upload-icon-url`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_upload_icon_getUploadUrl>
        }

        public async getUserTransactions(params: { userId: string }): Promise<ResponseType<typeof api_admin_user_transactions_getUserTransactions>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/users/${encodeURIComponent(params.userId)}/transactions`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_user_transactions_getUserTransactions>
        }

        public async listAllPackages(): Promise<ResponseType<typeof api_admin_packages_listAllPackages>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/packages`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_packages_listAllPackages>
        }

        public async listAllProducts(): Promise<ResponseType<typeof api_admin_products_listAllProducts>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/products`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_products_listAllProducts>
        }

        public async listTransactions(params: RequestType<typeof api_admin_transactions_listTransactions>): Promise<ResponseType<typeof api_admin_transactions_listTransactions>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                email:  params.email,
                limit:  params.limit === undefined ? undefined : String(params.limit),
                status: params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/transactions`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_transactions_listTransactions>
        }

        public async listUsers(): Promise<ResponseType<typeof api_admin_users_listUsers>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/users`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_users_listUsers>
        }

        public async listVouchers(params: RequestType<typeof api_admin_vouchers_listVouchers>): Promise<ResponseType<typeof api_admin_vouchers_listVouchers>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                search: params.search,
                status: params.status === undefined ? undefined : String(params.status),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/vouchers`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_vouchers_listVouchers>
        }

        public async listWhatsAppCS(): Promise<ResponseType<typeof api_admin_whatsapp_cs_listWhatsAppCS>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/whatsapp-cs`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_whatsapp_cs_listWhatsAppCS>
        }

        public async promoteToAdmin(params: RequestType<typeof api_admin_promote_admin_promoteToAdmin>): Promise<ResponseType<typeof api_admin_promote_admin_promoteToAdmin>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                role: params.role,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/users/${encodeURIComponent(params.userId)}/promote`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_promote_admin_promoteToAdmin>
        }

        public async saveConfig(params: RequestType<typeof api_admin_config_saveConfig>): Promise<ResponseType<typeof api_admin_config_saveConfig>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/config/save`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_config_saveConfig>
        }

        public async saveGlobalDiscount(params: RequestType<typeof api_admin_config_saveGlobalDiscount>): Promise<ResponseType<typeof api_admin_config_saveGlobalDiscount>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/config/global-discount`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_config_saveGlobalDiscount>
        }

        public async setAdmin(params: RequestType<typeof api_admin_manage_user_setAdmin>): Promise<ResponseType<typeof api_admin_manage_user_setAdmin>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/set-admin`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_manage_user_setAdmin>
        }

        public async toggleFeatured(params: RequestType<typeof api_admin_toggle_visibility_toggleFeatured>): Promise<ResponseType<typeof api_admin_toggle_visibility_toggleFeatured>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/toggle-featured`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_toggle_visibility_toggleFeatured>
        }

        public async togglePackage(params: RequestType<typeof api_admin_toggle_visibility_togglePackage>): Promise<ResponseType<typeof api_admin_toggle_visibility_togglePackage>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/toggle-package`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_toggle_visibility_togglePackage>
        }

        public async toggleProduct(params: RequestType<typeof api_admin_toggle_visibility_toggleProduct>): Promise<ResponseType<typeof api_admin_toggle_visibility_toggleProduct>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/toggle-product`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_toggle_visibility_toggleProduct>
        }

        public async toggleServerIdRequirement(params: RequestType<typeof api_admin_toggle_server_id_toggleServerIdRequirement>): Promise<ResponseType<typeof api_admin_toggle_server_id_toggleServerIdRequirement>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/toggle-server-id`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_toggle_server_id_toggleServerIdRequirement>
        }

        public async toggleSpecialItem(params: RequestType<typeof api_admin_toggle_special_item_toggleSpecialItem>): Promise<ResponseType<typeof api_admin_toggle_special_item_toggleSpecialItem>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/toggle-special-item`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_toggle_special_item_toggleSpecialItem>
        }

        public async unbanUser(params: RequestType<typeof api_admin_users_unbanUser>): Promise<ResponseType<typeof api_admin_users_unbanUser>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/users/unban`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_users_unbanUser>
        }

        public async updatePackage(params: RequestType<typeof api_admin_packages_crud_updatePackage>): Promise<ResponseType<typeof api_admin_packages_crud_updatePackage>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                amount:           params.amount,
                discountPrice:    params.discountPrice,
                isActive:         params.isActive,
                name:             params.name,
                price:            params.price,
                productId:        params.productId,
                uniplayDenomId:   params.uniplayDenomId,
                uniplayEntitasId: params.uniplayEntitasId,
                unit:             params.unit,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/packages/${encodeURIComponent(params.packageId)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_packages_crud_updatePackage>
        }

        public async updateProduct(params: RequestType<typeof api_admin_products_crud_updateProduct>): Promise<ResponseType<typeof api_admin_products_crud_updateProduct>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                category:    params.category,
                description: params.description,
                iconUrl:     params.iconUrl,
                isActive:    params.isActive,
                name:        params.name,
                slug:        params.slug,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/products/${encodeURIComponent(params.productId)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_products_crud_updateProduct>
        }

        public async updateSuperadminPhone(params: RequestType<typeof api_admin_update_phone_updateSuperadminPhone>): Promise<ResponseType<typeof api_admin_update_phone_updateSuperadminPhone>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/superadmin/update-phone`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_update_phone_updateSuperadminPhone>
        }

        public async updateTransaction(params: RequestType<typeof api_admin_update_transaction_updateTransaction>): Promise<ResponseType<typeof api_admin_update_transaction_updateTransaction>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                status: params.status,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/transactions/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_update_transaction_updateTransaction>
        }

        public async updateUserPhone(params: RequestType<typeof api_admin_manage_user_updateUserPhone>): Promise<ResponseType<typeof api_admin_manage_user_updateUserPhone>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/update-phone`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_manage_user_updateUserPhone>
        }

        public async updateWhatsAppCS(params: RequestType<typeof api_admin_whatsapp_cs_updateWhatsAppCS>): Promise<ResponseType<typeof api_admin_whatsapp_cs_updateWhatsAppCS>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                adminName:   params.adminName,
                isActive:    params.isActive,
                phoneNumber: params.phoneNumber,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/whatsapp-cs/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_whatsapp_cs_updateWhatsAppCS>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { checkUser as api_auth_check_user_checkUser } from "~backend/auth/check_user";
import { completeEmailRegistration as api_auth_complete_email_registration_completeEmailRegistration } from "~backend/auth/complete_email_registration";
import { completeProfile as api_auth_complete_profile_completeProfile } from "~backend/auth/complete_profile";
import { ensureUserExists as api_auth_ensure_user_exists_ensureUserExists } from "~backend/auth/ensure_user_exists";
import { loginPhone as api_auth_login_phone_loginPhone } from "~backend/auth/login_phone";
import { registerEmail as api_auth_register_email_registerEmail } from "~backend/auth/register_email";
import { registerPhone as api_auth_register_phone_registerPhone } from "~backend/auth/register_phone";
import { saveUserProfile as api_auth_save_user_profile_saveUserProfile } from "~backend/auth/save_user_profile";
import { updateProfile as api_auth_update_profile_updateProfile } from "~backend/auth/update_profile";

export namespace auth {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.checkUser = this.checkUser.bind(this)
            this.completeEmailRegistration = this.completeEmailRegistration.bind(this)
            this.completeProfile = this.completeProfile.bind(this)
            this.ensureUserExists = this.ensureUserExists.bind(this)
            this.loginPhone = this.loginPhone.bind(this)
            this.registerEmail = this.registerEmail.bind(this)
            this.registerPhone = this.registerPhone.bind(this)
            this.saveUserProfile = this.saveUserProfile.bind(this)
            this.updateProfile = this.updateProfile.bind(this)
        }

        public async checkUser(params: RequestType<typeof api_auth_check_user_checkUser>): Promise<ResponseType<typeof api_auth_check_user_checkUser>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/check-user`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_check_user_checkUser>
        }

        public async completeEmailRegistration(params: RequestType<typeof api_auth_complete_email_registration_completeEmailRegistration>): Promise<ResponseType<typeof api_auth_complete_email_registration_completeEmailRegistration>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/complete-email-registration`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_complete_email_registration_completeEmailRegistration>
        }

        public async completeProfile(params: RequestType<typeof api_auth_complete_profile_completeProfile>): Promise<ResponseType<typeof api_auth_complete_profile_completeProfile>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/complete-profile`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_complete_profile_completeProfile>
        }

        public async ensureUserExists(params: RequestType<typeof api_auth_ensure_user_exists_ensureUserExists>): Promise<ResponseType<typeof api_auth_ensure_user_exists_ensureUserExists>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/ensure-user-exists`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_ensure_user_exists_ensureUserExists>
        }

        public async loginPhone(params: RequestType<typeof api_auth_login_phone_loginPhone>): Promise<ResponseType<typeof api_auth_login_phone_loginPhone>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/login-phone`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_login_phone_loginPhone>
        }

        public async registerEmail(params: RequestType<typeof api_auth_register_email_registerEmail>): Promise<ResponseType<typeof api_auth_register_email_registerEmail>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/register-email`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_register_email_registerEmail>
        }

        public async registerPhone(params: RequestType<typeof api_auth_register_phone_registerPhone>): Promise<ResponseType<typeof api_auth_register_phone_registerPhone>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/register-phone`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_register_phone_registerPhone>
        }

        public async saveUserProfile(params: RequestType<typeof api_auth_save_user_profile_saveUserProfile>): Promise<ResponseType<typeof api_auth_save_user_profile_saveUserProfile>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/save-user-profile`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_save_user_profile_saveUserProfile>
        }

        public async updateProfile(params: RequestType<typeof api_auth_update_profile_updateProfile>): Promise<ResponseType<typeof api_auth_update_profile_updateProfile>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/update-profile`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_update_profile_updateProfile>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    getBalance as api_balance_balance_getBalance,
    getBalanceHistory as api_balance_balance_getBalanceHistory,
    redeemVoucher as api_balance_balance_redeemVoucher
} from "~backend/balance/balance";
import { getUserBalance as api_balance_get_balance_getUserBalance } from "~backend/balance/get_balance";

export namespace balance {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.getBalance = this.getBalance.bind(this)
            this.getBalanceHistory = this.getBalanceHistory.bind(this)
            this.getUserBalance = this.getUserBalance.bind(this)
            this.redeemVoucher = this.redeemVoucher.bind(this)
        }

        public async getBalance(): Promise<ResponseType<typeof api_balance_balance_getBalance>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/balance`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_balance_balance_getBalance>
        }

        public async getBalanceHistory(): Promise<ResponseType<typeof api_balance_balance_getBalanceHistory>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/balance/history`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_balance_balance_getBalanceHistory>
        }

        public async getUserBalance(): Promise<ResponseType<typeof api_balance_get_balance_getUserBalance>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/balance/get`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_balance_get_balance_getUserBalance>
        }

        public async redeemVoucher(params: RequestType<typeof api_balance_balance_redeemVoucher>): Promise<ResponseType<typeof api_balance_balance_redeemVoucher>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/balance/redeem`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_balance_balance_redeemVoucher>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { create as api_message_create_create } from "~backend/message/create";
import {
    deleteMessage as api_message_list_deleteMessage,
    list as api_message_list_list,
    markAsRead as api_message_list_markAsRead
} from "~backend/message/list";

export namespace message {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.deleteMessage = this.deleteMessage.bind(this)
            this.list = this.list.bind(this)
            this.markAsRead = this.markAsRead.bind(this)
        }

        public async create(params: RequestType<typeof api_message_create_create>): Promise<ResponseType<typeof api_message_create_create>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/messages`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_message_create_create>
        }

        public async deleteMessage(params: { messageId: number }): Promise<ResponseType<typeof api_message_list_deleteMessage>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/messages/${encodeURIComponent(params.messageId)}`, {method: "DELETE", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_message_list_deleteMessage>
        }

        public async list(params: RequestType<typeof api_message_list_list>): Promise<ResponseType<typeof api_message_list_list>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                order:    params.order === undefined ? undefined : String(params.order),
                showRead: params.showRead === undefined ? undefined : String(params.showRead),
                sortBy:   params.sortBy === undefined ? undefined : String(params.sortBy),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/messages`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_message_list_list>
        }

        public async markAsRead(params: { messageId: number }): Promise<ResponseType<typeof api_message_list_markAsRead>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/messages/${encodeURIComponent(params.messageId)}/read`, {method: "PUT", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_message_list_markAsRead>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { notifications as api_notification_stream_notifications } from "~backend/notification/stream";

export namespace notification {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.notifications = this.notifications.bind(this)
        }

        public async notifications(): Promise<StreamIn<StreamResponse<typeof api_notification_stream_notifications>>> {
            return await this.baseClient.createStreamIn(`/notifications/stream`)
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    sendOTP as api_otp_send_sendOTP,
    verifyOTP as api_otp_send_verifyOTP
} from "~backend/otp/send";

export namespace otp {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.sendOTP = this.sendOTP.bind(this)
            this.verifyOTP = this.verifyOTP.bind(this)
        }

        public async sendOTP(params: RequestType<typeof api_otp_send_sendOTP>): Promise<ResponseType<typeof api_otp_send_sendOTP>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/otp/send`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_otp_send_sendOTP>
        }

        public async verifyOTP(params: RequestType<typeof api_otp_send_verifyOTP>): Promise<ResponseType<typeof api_otp_send_verifyOTP>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/otp/verify`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_otp_send_verifyOTP>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { list as api_payment_list_list } from "~backend/payment/list";

export namespace payment {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.list = this.list.bind(this)
        }

        /**
         * Retrieves all active payment methods.
         */
        public async list(): Promise<ResponseType<typeof api_payment_list_list>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/payment-methods`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_payment_list_list>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { list as api_pkg_list_list } from "~backend/pkg/list";

export namespace pkg {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.list = this.list.bind(this)
        }

        /**
         * Retrieves all active packages for a product.
         */
        public async list(params: RequestType<typeof api_pkg_list_list>): Promise<ResponseType<typeof api_pkg_list_list>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                productId: String(params.productId),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/packages`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_pkg_list_list>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { get as api_product_get_get } from "~backend/product/get";
import { list as api_product_list_list } from "~backend/product/list";
import { listFeatured as api_product_list_featured_listFeatured } from "~backend/product/list_featured";

export namespace product {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.get = this.get.bind(this)
            this.list = this.list.bind(this)
            this.listFeatured = this.listFeatured.bind(this)
        }

        /**
         * Retrieves a product by its slug.
         */
        public async get(params: { slug: string }): Promise<ResponseType<typeof api_product_get_get>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/products/${encodeURIComponent(params.slug)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_product_get_get>
        }

        /**
         * Retrieves all active products, optionally filtered by category.
         */
        public async list(params: RequestType<typeof api_product_list_list>): Promise<ResponseType<typeof api_product_list_list>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                category: params.category,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/products`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_product_list_list>
        }

        public async listFeatured(): Promise<ResponseType<typeof api_product_list_featured_listFeatured>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/products/featured`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_product_list_featured_listFeatured>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { create as api_transaction_create_create } from "~backend/transaction/create";
import { get as api_transaction_get_get } from "~backend/transaction/get";
import { getUserTransactionHistory as api_transaction_history_getUserTransactionHistory } from "~backend/transaction/history";
import { listUserTransactions as api_transaction_list_user_listUserTransactions } from "~backend/transaction/list_user";

export namespace transaction {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.get = this.get.bind(this)
            this.getUserTransactionHistory = this.getUserTransactionHistory.bind(this)
            this.listUserTransactions = this.listUserTransactions.bind(this)
        }

        public async create(params: RequestType<typeof api_transaction_create_create>): Promise<ResponseType<typeof api_transaction_create_create>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/transactions`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_transaction_create_create>
        }

        /**
         * Retrieves transaction details by ID.
         */
        public async get(params: { id: string }): Promise<ResponseType<typeof api_transaction_get_get>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/transactions/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_transaction_get_get>
        }

        public async getUserTransactionHistory(params: RequestType<typeof api_transaction_history_getUserTransactionHistory>): Promise<ResponseType<typeof api_transaction_history_getUserTransactionHistory>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                endDate:   params.endDate,
                startDate: params.startDate,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/transaction/history`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_transaction_history_getUserTransactionHistory>
        }

        public async listUserTransactions(params: RequestType<typeof api_transaction_list_user_listUserTransactions>): Promise<ResponseType<typeof api_transaction_list_user_listUserTransactions>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                endDate:   params.endDate,
                order:     params.order === undefined ? undefined : String(params.order),
                sortBy:    params.sortBy === undefined ? undefined : String(params.sortBy),
                startDate: params.startDate,
                status:    params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/transactions/my`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_transaction_list_user_listUserTransactions>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { checkTime as api_uniplay_check_time_checkTime } from "~backend/uniplay/check_time";
import { confirmPaymentEndpoint as api_uniplay_confirm_payment_endpoint_confirmPaymentEndpoint } from "~backend/uniplay/confirm_payment_endpoint";
import { debugAuth as api_uniplay_debug_auth_debugAuth } from "~backend/uniplay/debug_auth";
import { debugUniPlayResponse as api_uniplay_debug_response_debugUniPlayResponse } from "~backend/uniplay/debug_response";
import { diagnostic as api_uniplay_diagnostic_diagnostic } from "~backend/uniplay/diagnostic";
import { getBalance as api_uniplay_get_balance_getBalance } from "~backend/uniplay/get_balance";
import { inquiryPaymentEndpoint as api_uniplay_inquiry_payment_endpoint_inquiryPaymentEndpoint } from "~backend/uniplay/inquiry_payment_endpoint";
import { simpleTest as api_uniplay_simple_test_simpleTest } from "~backend/uniplay/simple_test";
import { syncAllProducts as api_uniplay_sync_all_products_syncAllProducts } from "~backend/uniplay/sync_all_products";
import { syncUniPlayPackages as api_uniplay_sync_packages_syncUniPlayPackages } from "~backend/uniplay/sync_packages";
import { syncServices as api_uniplay_sync_services_syncServices } from "~backend/uniplay/sync_services";
import { testAPIResponse as api_uniplay_test_api_response_testAPIResponse } from "~backend/uniplay/test_api_response";
import { testConnection as api_uniplay_test_connection_testConnection } from "~backend/uniplay/test_connection";
import { testDTU as api_uniplay_test_dtu_testDTU } from "~backend/uniplay/test_dtu";
import { testInquiry as api_uniplay_test_inquiry_testInquiry } from "~backend/uniplay/test_inquiry";
import { testDatabaseSchema as api_uniplay_test_schema_testDatabaseSchema } from "~backend/uniplay/test_schema";
import { testVoucher as api_uniplay_test_voucher_testVoucher } from "~backend/uniplay/test_voucher";
import { testVoucherInquiry as api_uniplay_test_voucher_inquiry_testVoucherInquiry } from "~backend/uniplay/test_voucher_inquiry";
import { testVoucherList as api_uniplay_test_voucher_list_testVoucherList } from "~backend/uniplay/test_voucher_list";
import { validateUsername as api_uniplay_validate_username_validateUsername } from "~backend/uniplay/validate_username";

export namespace uniplay {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.checkTime = this.checkTime.bind(this)
            this.confirmPaymentEndpoint = this.confirmPaymentEndpoint.bind(this)
            this.debugAuth = this.debugAuth.bind(this)
            this.debugUniPlayResponse = this.debugUniPlayResponse.bind(this)
            this.diagnostic = this.diagnostic.bind(this)
            this.getBalance = this.getBalance.bind(this)
            this.inquiryPaymentEndpoint = this.inquiryPaymentEndpoint.bind(this)
            this.simpleTest = this.simpleTest.bind(this)
            this.syncAllProducts = this.syncAllProducts.bind(this)
            this.syncServices = this.syncServices.bind(this)
            this.syncUniPlayPackages = this.syncUniPlayPackages.bind(this)
            this.testAPIResponse = this.testAPIResponse.bind(this)
            this.testConnection = this.testConnection.bind(this)
            this.testDTU = this.testDTU.bind(this)
            this.testDatabaseSchema = this.testDatabaseSchema.bind(this)
            this.testInquiry = this.testInquiry.bind(this)
            this.testVoucher = this.testVoucher.bind(this)
            this.testVoucherInquiry = this.testVoucherInquiry.bind(this)
            this.testVoucherList = this.testVoucherList.bind(this)
            this.validateUsername = this.validateUsername.bind(this)
        }

        public async checkTime(): Promise<ResponseType<typeof api_uniplay_check_time_checkTime>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/uniplay/check-time`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_uniplay_check_time_checkTime>
        }

        public async confirmPaymentEndpoint(params: RequestType<typeof api_uniplay_confirm_payment_endpoint_confirmPaymentEndpoint>): Promise<ResponseType<typeof api_uniplay_confirm_payment_endpoint_confirmPaymentEndpoint>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/uniplay/confirm-payment-endpoint`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_uniplay_confirm_payment_endpoint_confirmPaymentEndpoint>
        }

        public async debugAuth(): Promise<ResponseType<typeof api_uniplay_debug_auth_debugAuth>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/uniplay/debug-auth`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_uniplay_debug_auth_debugAuth>
        }

        public async debugUniPlayResponse(): Promise<ResponseType<typeof api_uniplay_debug_response_debugUniPlayResponse>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/uniplay/debug-response`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_uniplay_debug_response_debugUniPlayResponse>
        }

        public async diagnostic(): Promise<ResponseType<typeof api_uniplay_diagnostic_diagnostic>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/uniplay/diagnostic`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_uniplay_diagnostic_diagnostic>
        }

        public async getBalance(): Promise<ResponseType<typeof api_uniplay_get_balance_getBalance>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/uniplay/balance`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_uniplay_get_balance_getBalance>
        }

        public async inquiryPaymentEndpoint(params: RequestType<typeof api_uniplay_inquiry_payment_endpoint_inquiryPaymentEndpoint>): Promise<ResponseType<typeof api_uniplay_inquiry_payment_endpoint_inquiryPaymentEndpoint>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/uniplay/inquiry-payment-endpoint`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_uniplay_inquiry_payment_endpoint_inquiryPaymentEndpoint>
        }

        public async simpleTest(): Promise<ResponseType<typeof api_uniplay_simple_test_simpleTest>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/uniplay/simple-test`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_uniplay_simple_test_simpleTest>
        }

        public async syncAllProducts(): Promise<ResponseType<typeof api_uniplay_sync_all_products_syncAllProducts>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/uniplay/sync-all-products`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_uniplay_sync_all_products_syncAllProducts>
        }

        public async syncServices(): Promise<ResponseType<typeof api_uniplay_sync_services_syncServices>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/uniplay/sync-pricelist`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_uniplay_sync_services_syncServices>
        }

        public async syncUniPlayPackages(params: RequestType<typeof api_uniplay_sync_packages_syncUniPlayPackages>): Promise<ResponseType<typeof api_uniplay_sync_packages_syncUniPlayPackages>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/uniplay/sync-packages`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_uniplay_sync_packages_syncUniPlayPackages>
        }

        public async testAPIResponse(): Promise<ResponseType<typeof api_uniplay_test_api_response_testAPIResponse>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/uniplay/test-api-response`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_uniplay_test_api_response_testAPIResponse>
        }

        public async testConnection(): Promise<ResponseType<typeof api_uniplay_test_connection_testConnection>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/uniplay/test`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_uniplay_test_connection_testConnection>
        }

        public async testDTU(): Promise<ResponseType<typeof api_uniplay_test_dtu_testDTU>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/uniplay/test-dtu`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_uniplay_test_dtu_testDTU>
        }

        public async testDatabaseSchema(): Promise<ResponseType<typeof api_uniplay_test_schema_testDatabaseSchema>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/uniplay/test-schema`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_uniplay_test_schema_testDatabaseSchema>
        }

        public async testInquiry(params: RequestType<typeof api_uniplay_test_inquiry_testInquiry>): Promise<ResponseType<typeof api_uniplay_test_inquiry_testInquiry>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/uniplay/test-inquiry`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_uniplay_test_inquiry_testInquiry>
        }

        public async testVoucher(): Promise<ResponseType<typeof api_uniplay_test_voucher_testVoucher>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/uniplay/test-voucher`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_uniplay_test_voucher_testVoucher>
        }

        public async testVoucherInquiry(): Promise<ResponseType<typeof api_uniplay_test_voucher_inquiry_testVoucherInquiry>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/uniplay/test-voucher-inquiry`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_uniplay_test_voucher_inquiry_testVoucherInquiry>
        }

        public async testVoucherList(): Promise<ResponseType<typeof api_uniplay_test_voucher_list_testVoucherList>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/uniplay/test-voucher-list`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_uniplay_test_voucher_list_testVoucherList>
        }

        public async validateUsername(params: RequestType<typeof api_uniplay_validate_username_validateUsername>): Promise<ResponseType<typeof api_uniplay_validate_username_validateUsername>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/uniplay/validate-username`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_uniplay_validate_username_validateUsername>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { testIsanAPI as api_validation_test_isan_api_testIsanAPI } from "~backend/validation/test_isan_api";
import { validateUsername as api_validation_validate_username_validateUsername } from "~backend/validation/validate_username";

export namespace validation {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.testIsanAPI = this.testIsanAPI.bind(this)
            this.validateUsername = this.validateUsername.bind(this)
        }

        public async testIsanAPI(params: RequestType<typeof api_validation_test_isan_api_testIsanAPI>): Promise<ResponseType<typeof api_validation_test_isan_api_testIsanAPI>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/validation/test-isan-api`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_validation_test_isan_api_testIsanAPI>
        }

        public async validateUsername(params: RequestType<typeof api_validation_validate_username_validateUsername>): Promise<ResponseType<typeof api_validation_validate_username_validateUsername>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/validation/username`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_validation_validate_username_validateUsername>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    sendWhatsApp as api_whatsapp_send_sendWhatsApp,
    testWhatsApp as api_whatsapp_send_testWhatsApp
} from "~backend/whatsapp/send";

export namespace whatsapp {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.sendWhatsApp = this.sendWhatsApp.bind(this)
            this.testWhatsApp = this.testWhatsApp.bind(this)
        }

        public async sendWhatsApp(params: RequestType<typeof api_whatsapp_send_sendWhatsApp>): Promise<ResponseType<typeof api_whatsapp_send_sendWhatsApp>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/whatsapp/send`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_whatsapp_send_sendWhatsApp>
        }

        public async testWhatsApp(params: RequestType<typeof api_whatsapp_send_testWhatsApp>): Promise<ResponseType<typeof api_whatsapp_send_testWhatsApp>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/whatsapp/test`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_whatsapp_send_testWhatsApp>
        }
    }
}


type PickMethods<Type> = Omit<CallParameters, "method"> & { method?: Type };

// Helper type to omit all fields that are cookies.
type OmitCookie<T> = {
  [K in keyof T as T[K] extends CookieWithOptions<any> ? never : K]: T[K];
};

type RequestType<Type extends (...args: any[]) => any> =
  Parameters<Type> extends [infer H, ...any[]]
    ? OmitCookie<H>
    : void;

type ResponseType<Type extends (...args: any[]) => any> = OmitCookie<Awaited<ReturnType<Type>>>;

function dateReviver(key: string, value: any): any {
  if (
    typeof value === "string" &&
    value.length >= 10 &&
    value.charCodeAt(0) >= 48 && // '0'
    value.charCodeAt(0) <= 57 // '9'
  ) {
    const parsedDate = new Date(value);
    if (!isNaN(parsedDate.getTime())) {
      return parsedDate;
    }
  }
  return value;
}


function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

import {
  StreamInOutHandlerFn,
  StreamInHandlerFn,
  StreamOutHandlerFn,
} from "encore.dev/api";

type StreamRequest<Type> = Type extends
  | StreamInOutHandlerFn<any, infer Req, any>
  | StreamInHandlerFn<any, infer Req, any>
  | StreamOutHandlerFn<any, any>
  ? Req
  : never;

type StreamResponse<Type> = Type extends
  | StreamInOutHandlerFn<any, any, infer Resp>
  | StreamInHandlerFn<any, any, infer Resp>
  | StreamOutHandlerFn<any, infer Resp>
  ? Resp
  : never;


function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data, dateReviver))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}

// AuthDataGenerator is a function that returns a new instance of the authentication data required by this API
export type AuthDataGenerator = () =>
  | RequestType<typeof auth_auth>
  | Promise<RequestType<typeof auth_auth> | undefined>
  | undefined;

// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
    readonly authGenerator?: AuthDataGenerator

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "-Generated-TS-Client (Encore/1.50.6)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }

        // Setup an authentication data generator using the auth data token option
        if (options.auth !== undefined) {
            const auth = options.auth
            if (typeof auth === "function") {
                this.authGenerator = auth
            } else {
                this.authGenerator = () => auth
            }
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        let authData: RequestType<typeof auth_auth> | undefined;

        // If authorization data generator is present, call it and add the returned data to the request
        if (this.authGenerator) {
            const mayBePromise = this.authGenerator();
            if (mayBePromise instanceof Promise) {
                authData = await mayBePromise;
            } else {
                authData = mayBePromise;
            }
        }

        if (authData) {
            const data: CallParameters = {};

            data.headers = makeRecord<string, string>({
                authorization: authData.authorization,
            });

            return data;
        }

        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(path: string, params?: CallParameters): Promise<Response> {
        return this.callAPI(path, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(path: string, params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}

export default new Client(import.meta.env.VITE_CLIENT_TARGET, { requestInit: { credentials: "include" } });
